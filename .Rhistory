devtools::install_github('yihui/xaringan')
install.packages("revealjs", type = "source")
xaringan:::inf_mr()
library(plyr)
library(dplyr)
shiny::runApp('shinyApps/shinyDashBoard')
runApp('shinyApps/shinyDashBoard')
packages.install('shinydashboard')
install.packages('shinydashboard')
runApp('shinyApps/shinyDashBoard')
library(googleVis)
demo(googleVis)
head(mtcars, n = 10)
scatter <- gvisScatterChart(mtcars[,c("wt", "mpg")])
plot(scatter)
?gvisScatterChart
print(scatter)
dt <- mtcars[,c("wt", "mpg")]
dt$cyl_4 <- ifelse(mtcars$cyl==4, dt$mpg, NA)
dt$cyl_6 <- ifelse(mtcars$cyl==6, dt$mpg, NA)
dt$cyl_8 <- ifelse(mtcars$cyl==8, dt$mpg, NA)
dt$mpg <- NULL
head(dt)
scatter <- gvisScatterChart(dt)
plot(scatter)
my_options <- list(width="600px", height="300px",
title="Motor Trend Car Road Tests",
hAxis="{title:'Weight (1000 lbs)'}",
vAxis="{title:'Miles/(US) gallon'}")
plot(gvisScatterChart(dt,options=my_options))
my_options$explorer <- "{actions:['dragToZoom', 'rightClickToReset']}"
plot(gvisScatterChart(dt,options=my_options)")
my_options$explorer <- "{actions:['dragToZoom', 'rightClickToReset']}"
plot(gvisScatterChart(dt,options=my_options))
my_options
my_options$explorer <- "{actions:['dragToZoom', 'rightClickToReset'], axis: 'horizontal'}"
plot(gvisScatterChart(dt,options=my_options))
dt <- mtcars[,c("wt", "mpg")]
dt$cyl_4 <- ifelse(mtcars$cyl==4, dt$mpg, NA)
dt$cyl_4.html.tooltip <- rownames(dt)
dt$cyl_6 <- ifelse(mtcars$cyl==6, dt$mpg, NA)
dt$cyl_6.html.tooltip <- rownames(dt)
dt$cyl_8 <- ifelse(mtcars$cyl==8, dt$mpg, NA)
dt$cyl_8.html.tooltip <- rownames(dt)
dt$mpg <- NULL
head(dt)
devtools::install_github("rstudio/leaflet")
library(leaflet)
leaflet() %>% addTiles() %>% # Add default OpenStreetMap map tiles
addMarkers(lng=-74.0059, lat=40.7128, popup="New York City")
leaflet_andrew <- leaflet(Andrew) %>%
addTiles() %>%
addPolylines(~Long, ~Lat)
leaflet_andrew
head(andrew)
head(Andrew)
library(maps)
map("state", fill = FALSE)
map("state", fill = FALSE, region = c("new york","florida", "louisiana", "mississippi","alabama", "georgia", "tennesse"))
map("state", fill = FALSE, plot = FALSE)
map("state", fill = FALSE, plot = TRUE)
map("state", fill = TRUE, plot = TRUE)
map("state", fill = TRUE, plot = TRUE, region = 'new york')
map("state", fill = FALSE, plot = TRUE, region = 'new york')
map("state", fill = TRUE, plot = FALSE, region = c("florida", "louisiana", "mississippi","alabama", "georgia", "tennesse"))
head(.Last.value)
colStates <- map("state", fill = TRUE,
plot = FALSE,
region = c("florida", "louisiana", "mississippi",
"alabama", "georgia", "tennesse"))
leaflet_andrew <- leaflet_andrew %>%
addPolygons(data=colStates,
fillColor = heat.colors(6, alpha = 1),
stroke = FALSE)
leaflet_andrew
leaflet_andrew <- leaflet_andrew %>%
addPolygons(data=colStates,
fillColor = heat.colors(6, alpha = NULL),
stroke = FALSE)
leaflet_andrew
leaflet_andrew <- leaflet_andrew %>% addProviderTiles("Esri.WorldStreetMap")
leaflet_andrew
leaflet_andrew <- leaflet_andrew %>% addProviderTiles("OpenStreetMap.BlackAndWhite")
leaflet_andrew
runApp('simple_leaflet')
?checkboxInput
runApp('simple_leaflet')
LETTERS[1:6]
letters[1:6]
runApp('simple_leaflet')
shinyUI(dashboardPage(
dashboardHeader(),
dashboardSidebar(),
dashboardBody()
))
shinyUI(dashboardPage(
dashboardHeader(title = "My Dashboard"),
dashboardSidebar(),
dashboardBody()
))
library(shinydashboard)
shinyUI(dashboardPage(
dashboardHeader(title = "My Dashboard"),
dashboardSidebar(),
dashboardBody()
))
shinyUI(dashboardPage(
dashboardHeader(title = "My Dashboard"),
dashboardSidebar(),
dashboardBody()
))
runApp('shinyApps/shinyDashBoard')
runApp('dashboard_demo')
state.x77
head(state.x77)
state_stat
head(state_stat)
devtools::install_github('rstudio/DT')
#1
baby2014 <- read.table('yob2014.txt', sep = ',')
readall <- read.csv('C:\Users\USER\Downloads\146_DT_MLTM_1310_20180716043556.csv', sep=',')
head(readall)
readall <- read.csv('C:\Users\USER\Downloads\146_DT_MLTM_1310_20180716043556.csv', sep=',')
head(readall)
readall <- read.csv('C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv', sep=',')
head(readall)
readall <- read.csv('C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv', sep=',')
head(readall)
readall <- read.csv('C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv', sep=',')
head(readall)
readall <- read.csv('C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv', sep=',')
head(readall)
readall <- read.csv('C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv', sep=',')
head(readall)
readall <- read.csv('C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv')
head(readall)
readall <- read.csv('C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv', fileEncoding = 'UTF-8')
head(readall)
readall <- read.csv('C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv', fileEncoding = 'UTF-8', sep = ',')
head(readall)
readall <- read.csv('C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv', fileEncoding = 'UTF-8', sep = '","')
head(readall)
readall <- read.csv('C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv', fileEncoding = 'UTF-16', sep = '","')
readall <- read.csv('C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv', fileEncoding = 'UTF-16')
head(readall)
readall <- read.csv('C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv', fileEncoding = 'UTF-8')
readall <- read.csv('C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv')
head(readall)
readall <- read.csv("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", sep = ",", encoding = "UTF-8")
head(readall)
readall <- read.csv("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", sep = ",", encoding = "UTF-8")
head(readall)
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", sep = ",", encoding = "UTF-8")
head(readall)
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", header='T', sep = ",", encoding = "UTF-8")
head(readall)
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", header='T', sep = ",", encoding = "UTF-16")
head(readall)
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", header='T', sep = ",", encoding = "UTF-16")
head(readall)
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", header='T', sep = ",", encoding = "ANSI")
head(readall)
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", sep = ",", encoding = "ANSI")
head(readall)
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", sep = ",", encoding = "UTF-8")
head(readall)
source('~/.active-rstudio-document', echo=TRUE)
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", header = 'T', sep = ",", encoding = "UTF-8")
head(readall)
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", header='T', sep = ",", encoding = "UTF-8")
head(readall)
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", header='T', sep = ",", encoding = "UTF-8")
head(readall)
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", header='T', sep = ",", encoding = "UTF-8")
head(readall)
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", header='T', sep = ",", encoding = "UTF-8")
head(readall)
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", header='T', sep = ",")
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", header='T', sep = ",")
head(readall)
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", header='T', sep = ",")
head(readall)
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", header='T', sep = ",")
head(readall)
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", header='T', sep = ",")
head(readall)
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", header='T', sep = ",")
head(readall)
readall <- read.table("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", header='T', sep = ",")
head(readall)
readall <- read.csv("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", header='T', sep = ",")
readall <- read.csv("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", sep = ",")
head(readall)
readall <- read.csv("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", sep = ",")
head(readall)
readall <- read.csv("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", sep = ",", encoding-'UTF-8')
head(readall)
library(readr)
readall <- read.csv("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", sep = ",", encoding-'UTF-8')
head(readall)
readall <- read.csv("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", sep = ",", encoding-'UTF')
?read.csv()
readall <- read.csv("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", sep = ",", encoding-'UTF')
head(readall)
readall <- read.csv("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", sep = ",", encoding='UTF-8')
head(readall)
readall <- read.csv("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", sep = ",", encoding='UTF8')
head(readall)
as_utf8("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv")
?as_utf8
?as_utf8()
library(utf8)
as_utf8("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv")
readall <- read.csv("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", sep = ",", encoding='UTF8')
head(readall)
readall <- read.csv("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", sep = ",", encoding='UTF-8')
head(readall)
as_utf8("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv")
library(utf8)
readall <- read.csv("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv", sep = ",", encoding='UTF-8')
head(readall)
as_utf8("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv")
library(utf8)
read.csv(as_utf8("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv"), sep= ',')
read.csv(as_utf8("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv"), sep= ',', encoding = 'UTF-8')
utf8_print('readall')
utf8_print(readall)
read.csv(utf8_print("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv"), sep= ',', encoding = 'UTF-8')
read.csv(utf8_print("C:/Users/USER/Downloads/146_DT_MLTM_1310_20180716043556.csv"), sep= ',')
ggplot(inspections, aes(x = score)) + geom_density(aes(color = boro))
ggplot(inspections, aes(x = score)) + geom_density(aes(color = boro))
library(tidyverse)
raw.df <- readr::read_csv("./data.csv")
# 1. Convert all the column names to lower cases and rename the columns that have empty space.
colnames(raw.df) <- tolower(colnames(raw.df))
raw.df <- rename(raw.df, 'cuisine' = 'cuisine description', 'inspection.date' = 'inspection date')
# 2. Convert the inspection.date column from character to date format.
raw.df$inspection.date <- as.Date(raw.df$inspection.date, '%m/%d/%Y')
# 3. Mutate a new column called month that extract the month from inspection.date and convert it to numeric. For example, 03/24/2016 -> 03
library(lubridate)
raw.df <- mutate(raw.df, month = month(raw.df$inspection.date))
# 4. Impute the missing values for the 'grade' column
raw.df$grade <- ifelse(0 <= raw.df$score & raw.df$score < 14, 'A', ifelse(14 <= raw.df$score & raw.df$score < 28, 'B', ifelse(raw.df$score >= 28, 'C', '')))
# 5. Rename the description from the action column to something short so it won't blow up your graph.
raw.df <- mutate(raw.df, action = ifelse(raw.df$action == 'Violations were cited in the following area(s).', 'violations', ifelse(raw.df$action == 'Establishment Closed by DOHMH.  Violations were cited in the following area(s) and those requiring immediate action were addressed.', 'closed', ifelse(raw.df$action == 'No violations were recorded at the time of this inspection.', 'no violations', ifelse(raw.df$action == 'Establishment re-opened by DOHMH', 'reopened', ifelse(raw.df$action == 'Establishment re-closed by DOHMH', 'reclosed', ''))))))
# 6. We want to filter out missing values to make our lives easier for further analysis.
library(dplyr)
raw.df <- filter(raw.df, boro %in% c('QUEENS','MANHATTAN','BROOKLYN','BRONX','STATEN ISLAND'))
raw.df <- filter(raw.df, score >= 0)
raw.df <- filter(raw.df, year(inspection.date) >= 2013 & year(inspection.date) <= 2018)
# 7. Select the following columns from raw.df: camis, boro, cuisine, inspection.date, action, score, grade, month
raw.df <- raw.df %>% select(camis, boro, cuisine, inspection.date, action, score, grade, month)
# 8. Unique inspections
inspections <- unique(raw.df)
ggplot(inspections, aes(x = boro, fill = grade)) + geom_bar(position = 'dodge', stat = 'count')
#Restaurants in Manhattan got relatively better grades than other broughs restaurants.
top20 <- (inspections %>% group_by(cuisine) %>% summarise(count = n()) %>% arrange(desc(count)) %>% head(20))$cuisine
top20_grades <- inspections %>% filter(cuisine %in% top20)
ggplot(top20_grades, aes(x = cuisine, fill = grade)) + geom_bar(position = 'dodge', stat = 'count')
ggplot(inspections, aes(x = score)) + geom_density(aes(color = boro))
ggplot(inspections, aes(x = score)) + geom_density(aes(color = boro)) + zoom
head(inspections)
unique(inspections$action)
closures <- inspections %>% group_by(boro, action) %>% summarise(count = n()) ; closures
?summarise
closures <- inspections %>% group_by(boro, action) %>% summarise(percentage = n()/sum(n()) ; closures
closures <- inspections %>% group_by(boro, action) %>% summarise(percentage = n()/sum(n())) ; closures
closures <- inspections %>% group_by(boro, action) %>% summarise(count = n()) ; closures
closures %>% summarise(count/sum(count))
closures %>% group_by(boro) %>% mutate(percentage = count(sum(count))) ; closures
closures %>% group_by(boro, count) %>% mutate(percentage = count(sum(count))) ; closures
closures %>% mutate(percentage = count(sum(count))) ; closures
closures %>% mutate(percentage = count/sum(count))
closures %>% group_by(boro) %>% mutate(percentage = count/sum(count))
closures %>% group_by(boro) %>% mutate(percentage = count/sum(count))
0.949 + 0.0176 + 0.00453 + 0.0117 + 0.0173
closures %>% group_by(boro) %>% mutate(percentage = 100 * count/sum(count))
closures %>% mutate(percentage = 100 * count/sum(count))
closures %>% mutate('closure ratio' = 100 * count/sum(count))
closures %>% mutate(closure ratio = 100 * count/sum(count))
closures %>% mutate(closure.ratio = 100 * count/sum(count))
closures
closures[closures$action %in% c('closed','reclosed')]
closures[closures$action %in% c('closed','reclosed')]
closures$action
closures$action %in% c('closed','reclosed')
closures[closures$action %in% c('closed','reclosed'), ]
summarised <- inspections %>% group_by(boro, action) %>% summarise(count = n()) %>% mutate(closure.ratio = 100 * count/sum(count))
closures <- summarised[summarised$action %in% c('closed','reclosed'), ]
closures
closures %>% group_by(boro) %>% summarise(sum(closure.ratio))
summarised <- inspections %>% group_by(boro, action) %>% summarise(count = n()) %>% mutate(closure.ratio = 100 * count/sum(count))
closures <- summarised[summarised$action %in% c('closed','reclosed'), ]
closures %>% group_by(boro) %>% summarise(sum(closure.ratio))
summarised <- inspections %>% group_by(boro, action) %>% summarise(count = n()) %>% mutate(closure.ratio = 100 * count/sum(count))
closures <- summarised[summarised$action == 'closed', ]
closures %>% group_by(boro) %>% summarise(sum(closure.ratio))
closures
summarised
plotting <- summarised[summarised$action %in% c('closed','reclosed'), ] ; plotting
ggplot(plotting, aes(x = boro, fill = action)) + geom_bar(position = 'fill')
ggplot(plotting, aes(x = boro, fill = action)) + geom_bar(aes(y = count, position = 'fill')
ggplot(plotting, aes(x = boro, fill = action)) + geom_bar(aes(y = count), position = 'fill')
ggplot(plotting, aes(x = boro, fill = action)) + geom_bar(aes(y = count), position = 'fill', stat= 'identity')
top20_grades
top20_grades %>% group_by(boro, cuisine)
closures
summarised
top20_grades %>% group_by(boro, cuisine) %>% summarise(count = n())
top20_grades %>% group_by(boro, cuisine, action) %>% summarise(count = n())
top20_grades %>% group_by(boro, cuisine, action) %>% summarise(count = n()) %>% mutate(inspection.ratio = count/sum(count))
top20_cb <- top20_grades %>% group_by(boro, cuisine, action) %>% summarise(count = n()) %>% mutate(inspection.ratio = count/sum(count)) ; top20_cb
ggplot(top20_cb, aes(x = boro, fill = cuisine)) + geom_bar(stat = 'count')
ggplot(top20_cb, aes(x = boro, fill = cuisine)) + geom_bar(stat = 'count') + facet_grid(cuisine)
ggplot(top20_cb, aes(x = boro, fill = cuisine)) + geom_bar(stat = 'count') + facet_grid(~ cuisine)
ggplot(top20_cb, aes(x = boro, fill = cuisine)) + geom_bar(stat = 'count') + facet_grid(boro ~ cuisine)
ggplot(top20_cb, aes(x = boro, fill = cuisine)) + geom_bar(stat = 'count') + facet_wrap(boro ~ cuisine)
ggplot(top20_cb, aes(x = boro, fill = cuisine)) + geom_bar(stat = 'count') + facet_wrap(cuisine ~ boro)
ggplot(top20_cb, aes(x = boro, fill = cuisine)) + geom_bar(stat = 'count') + facet_wrap(boro)
ggplot(top20_cb, aes(x = boro, fill = cuisine)) + geom_bar(stat = 'count') + facet_wrap(~boro)
library(xlsx)
install.packages('xlsx')
library(xlsx)
library(xlsx)
library(xlsx)
read.table('data_sample.xlsx')
read.table('data_sample.xls')
read.table('sample_dataset.xls')
library(xlsx)
read.table('sample_dataset.xls')
read.xlsx('sample_dataset.xls')
read.csv('sample_dataset.xls')
?read.xlsx()
library('xlsx')
install.packages('xlsx')
library(xlsx)
library(xlsx)
read.xlsx
read.xlsx()
xlsx::read.xlsx()
read.xlsx2
library(xlsx)
library(xlsx)
read.xlsx('sample_dataset.xls')
library(xlsx)
read.xlsx('sample_dataset.xls')
shiny::runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps/shinyApps/shinyDashBoard')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps_basic/shinyApps/shinyDashBoard')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps/shinyApps/shinyDashBoard')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps_basic/shinyApps/shinyDashBoard')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps/shinyApps/shinyDashBoard')
box()
?box()
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps/shinyApps/shinyDashBoard')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps_basic/shinyApps/shinyDashBoard')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps/shinyApps/shinyDashBoard')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps/shinyApps/shinyDashBoard')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps_basic/shinyApps/shinyDashBoard')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps/shinyApps/shinyDashBoard')
?dbGetAllDomainTables
??dbGetAllDomainTables
source('./helpers.R')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps/shinyApps/shinyDashBoard')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps_basic/shinyApps/shinyDashBoard')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps/shinyApps/shinyDashBoard')
colnames(state_stat)
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps_basic/shinyApps/shinyDashBoard')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps/shinyApps/shinyDashBoard')
choice <- colnames(trade_data)[-1]
colnames(trade_data)[-1]
colnames(trade_data)
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps/shinyApps/shinyDashBoard')
colnames(trade_data)
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps/shinyApps/shinyDashBoard')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps_basic/shinyApps/shinyDashBoard')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps/shinyApps/shinyDashBoard')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps_basic/shinyApps/shinyDashBoard')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps/shinyApps/shinyDashBoard')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps_basic/shinyApps/shinyDashBoard')
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps/shinyApps/shinyDashBoard')
colnames(trade_data %>% select('year', 'export_weight', 'import_weight', 'export_amount', 'import_amount', 'trade_balance', 'HS_code', 'description'))
runApp('C:/Users/USER/Desktop/shiny_project_jinsookim/shinyApps/shinyApps/shinyDashBoard')
